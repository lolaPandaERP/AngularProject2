{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ExperienceComponent {\n  constructor() {\n    this.title = \"Mes expériences\";\n  }\n}\nExperienceComponent.ɵfac = function ExperienceComponent_Factory(t) {\n  return new (t || ExperienceComponent)();\n};\nExperienceComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ExperienceComponent,\n  selectors: [[\"app-experience\"]],\n  inputs: {\n    title: \"title\"\n  },\n  decls: 41,\n  vars: 1,\n  consts: [[1, \"jumbotron\", \"text-center\"], [1, \"container\"], [1, \"jumbotron-heading\"], [\"id\", \"accordionExample\", 1, \"accordion\"], [1, \"accordion-item\"], [\"id\", \"headingOne\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseOne\", \"aria-expanded\", \"true\", \"aria-controls\", \"collapseOne\", 1, \"accordion-button\"], [\"id\", \"collapseOne\", \"aria-labelledby\", \"headingOne\", \"data-bs-parent\", \"#accordionExample\", 1, \"accordion-collapse\", \"collapse\", \"show\"], [1, \"accordion-body\"], [1, \"card-text\"], [\"id\", \"headingTwo\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseTwo\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseTwo\", 1, \"accordion-button\", \"collapsed\"], [\"id\", \"collapseTwo\", \"aria-labelledby\", \"headingTwo\", \"data-bs-parent\", \"#accordionExample\", 1, \"accordion-collapse\", \"collapse\"], [\"id\", \"headingThree\", 1, \"accordion-header\"], [\"type\", \"button\", \"data-bs-toggle\", \"collapse\", \"data-bs-target\", \"#collapseThree\", \"aria-expanded\", \"false\", \"aria-controls\", \"collapseThree\", 1, \"accordion-button\", \"collapsed\"], [\"id\", \"collapseThree\", \"aria-labelledby\", \"headingThree\", \"data-bs-parent\", \"#accordionExample\", 1, \"accordion-collapse\", \"collapse\"]],\n  template: function ExperienceComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"br\");\n      i0.ɵɵelementStart(3, \"h1\", 2);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(5, \"br\");\n      i0.ɵɵelementStart(6, \"div\", 3)(7, \"div\", 4)(8, \"h2\", 5)(9, \"button\", 6);\n      i0.ɵɵtext(10, \" BACHELOR - CONCEPTEUR DEVELOPPEUR D'APPLICATION \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"div\", 8)(13, \"strong\");\n      i0.ɵɵtext(14, \"Formation dispens\\u00E9 par le CESI de Bordeaux.\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"p\", 9);\n      i0.ɵɵtext(16, \"tutu\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"div\", 4)(18, \"h2\", 10)(19, \"button\", 11);\n      i0.ɵɵtext(20, \" FORMATION DEVELOPPEUR INFORMATIQUE \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 12)(22, \"div\", 8)(23, \"strong\");\n      i0.ɵɵtext(24, \"This is the second item's accordion body.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(25, \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \");\n      i0.ɵɵelementStart(26, \"code\");\n      i0.ɵɵtext(27, \".accordion-body\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(28, \", though the transition does limit overflow. \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(29, \"div\", 4)(30, \"h2\", 13)(31, \"button\", 14);\n      i0.ɵɵtext(32, \" Accordion Item #3 \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(33, \"div\", 15)(34, \"div\", 8)(35, \"strong\");\n      i0.ɵɵtext(36, \"This is the third item's accordion body.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(37, \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \");\n      i0.ɵɵelementStart(38, \"code\");\n      i0.ɵɵtext(39, \".accordion-body\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(40, \", though the transition does limit overflow. \");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(ctx.title);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,mBAAmB;EALhCC;IAMW,UAAK,GAAU,iBAAiB;;;AAD9BD,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAE;EAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCNhCC,kCAAuC;MAEnCA,qBAAM;MACNA,6BAA8B;MAAAA,YAAS;MAAAA,iBAAK;MAGhDA,qBAAM;MAENA,8BAA6C;MAIrCA,kEACF;MAAAA,iBAAS;MAEXA,+BAA+H;MAEnHA,iEAA2C;MAAAA,iBAAS;MAE9DA,6BAAqB;MAAAA,qBAAI;MAAAA,iBAAI;MAGjCA,+BAA4B;MAGtBA,qDACF;MAAAA,iBAAS;MAEXA,gCAA0H;MAE9GA,0DAAyC;MAAAA,iBAAS;MAACA,4XAA0W;MAAAA,6BAAM;MAAAA,gCAAe;MAAAA,iBAAO;MAAAA,8DACnc;MAAAA,iBAAM;MAGVA,+BAA4B;MAGtBA,oCACF;MAAAA,iBAAS;MAEXA,gCAA8H;MAElHA,yDAAwC;MAAAA,iBAAS;MAACA,4XAA0W;MAAAA,6BAAM;MAAAA,gCAAe;MAAAA,iBAAO;MAAAA,8DAClc;MAAAA,iBAAM;;;MAxCsBA,eAAS;MAATA,+BAAS","names":["ExperienceComponent","constructor","selectors","inputs","title","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\laragon\\www\\angular\\AngularProject\\src\\app\\Pages\\experience\\experience.component.ts","C:\\laragon\\www\\angular\\AngularProject\\src\\app\\Pages\\experience\\experience.component.html"],"sourcesContent":["import { Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'app-experience',\n  templateUrl: './experience.component.html',\n  styleUrls: ['./experience.component.scss']\n})\nexport class ExperienceComponent {\n  @Input() title:string = \"Mes expériences\";\n\n}\n","\n<section class=\"jumbotron text-center\">\n  <div class=\"container\">\n    <br />\n    <h1 class=\"jumbotron-heading\">{{title}}</h1>\n  </div>\n</section>\n<br />\n\n<div class=\"accordion\" id=\"accordionExample\">\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingOne\">\n      <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        BACHELOR - CONCEPTEUR DEVELOPPEUR D'APPLICATION\n      </button>\n    </h2>\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>Formation dispensé par le CESI de Bordeaux.</strong>\n      </div>\n      <p class=\"card-text\">tutu</p>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingTwo\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n        FORMATION DEVELOPPEUR INFORMATIQUE\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div class=\"accordion-item\">\n    <h2 class=\"accordion-header\" id=\"headingThree\">\n      <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div class=\"accordion-body\">\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}