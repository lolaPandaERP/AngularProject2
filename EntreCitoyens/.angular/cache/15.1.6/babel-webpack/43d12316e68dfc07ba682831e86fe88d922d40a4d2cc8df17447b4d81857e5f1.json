{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ResourceDetailsComponent = class ResourceDetailsComponent {\n  constructor(route, router, resourceService) {\n    this.route = route;\n    this.router = router;\n    this.resourceService = resourceService;\n  }\n  ngOnInit() {\n    const resourceId = this.route.snapshot.paramMap.get('id');\n    if (resourceId) {\n      this.fetchResourceDetail(resourceId);\n    } else {\n      // Gérer le cas où l'ID de la ressource n'est pas disponible\n    }\n  }\n  fetchResourceDetail(resourceId) {\n    this.resourceService.getResourceById(resourceId).subscribe(resource => {\n      this.resourceDetail = resource;\n    }, error => {\n      // Gérer les erreurs ici\n    });\n  }\n  shareResource() {\n    // Logique de partage de la ressource\n    // Par exemple, ouvrir une boîte de dialogue avec le lien de partage\n  }\n  editResource() {\n    const resourceId = this.resourceDetail.id;\n    this.router.navigate(['/resource/edit', resourceId]);\n  }\n  deleteResource() {\n    const resourceId = this.resourceDetail.id;\n    this.resourceService.deleteResource(resourceId).subscribe(() => {\n      // Gérer la suppression réussie ici\n      // Par exemple, rediriger vers la liste des ressources\n      this.router.navigate(['/resources']);\n    }, error => {\n      // Gérer les erreurs ici\n    });\n  }\n  addComment() {\n    const commentText = this.newComment;\n    const comment = {\n      text: commentText\n    };\n    this.resourceService.addComment(this.resourceDetail.id, comment).subscribe(() => {\n      // Gérer l'ajout du commentaire réussi ici\n      // Par exemple, actualiser la liste des commentaires\n      this.fetchResourceDetail(this.resourceDetail.id);\n      this.newComment = '';\n    }, error => {\n      // Gérer les erreurs ici\n    });\n  }\n  deleteComment(commentId) {\n    this.resourceService.deleteComment(this.resourceDetail.id, commentId).subscribe(() => {\n      // Gérer la suppression du commentaire réussie ici\n      // Par exemple, actualiser la liste des commentaires\n      this.fetchResourceDetail(this.resourceDetail.id);\n    }, error => {\n      // Gérer les erreurs ici\n    });\n  }\n};\nResourceDetailsComponent = __decorate([Component({\n  selector: 'app-resource-details',\n  templateUrl: './resource-details.component.html',\n  styleUrls: ['./resource-details.component.scss']\n})], ResourceDetailsComponent);\nexport { ResourceDetailsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAW1C,IAAMC,wBAAwB,GAA9B,MAAMA,wBAAwB;EAInCC,YACUC,KAAqB,EACrBC,MAAc,EACdC,eAAgC;IAFhC,UAAK,GAALF,KAAK;IACL,WAAM,GAANC,MAAM;IACN,oBAAe,GAAfC,eAAe;EACrB;EAEJC,QAAQ;IACN,MAAMC,UAAU,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACzD,IAAIH,UAAU,EAAE;MACd,IAAI,CAACI,mBAAmB,CAACJ,UAAU,CAAC;KACrC,MAAM;MACL;IAAA;EAEJ;EAEAI,mBAAmB,CAACJ,UAAkB;IACpC,IAAI,CAACF,eAAe,CAACO,eAAe,CAACL,UAAU,CAAC,CAACM,SAAS,CACvDC,QAAkB,IAAI;MACrB,IAAI,CAACC,cAAc,GAAGD,QAAQ;IAChC,CAAC,EACAE,KAAK,IAAI;MACR;IAAA,CACD,CACF;EACH;EAEAC,aAAa;IACX;IACA;EAAA;EAGFC,YAAY;IACV,MAAMX,UAAU,GAAG,IAAI,CAACQ,cAAc,CAACI,EAAE;IACzC,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,gBAAgB,EAAEb,UAAU,CAAC,CAAC;EACtD;EAEAc,cAAc;IACZ,MAAMd,UAAU,GAAG,IAAI,CAACQ,cAAc,CAACI,EAAE;IACzC,IAAI,CAACd,eAAe,CAACgB,cAAc,CAACd,UAAU,CAAC,CAACM,SAAS,CACvD,MAAK;MACH;MACA;MACA,IAAI,CAACT,MAAM,CAACgB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC,EACAJ,KAAK,IAAI;MACR;IAAA,CACD,CACF;EACH;EAEAM,UAAU;IACR,MAAMC,WAAW,GAAG,IAAI,CAACC,UAAU;IACnC,MAAMC,OAAO,GAAY;MAAEC,IAAI,EAAEH;IAAW,CAAE;IAE9C,IAAI,CAAClB,eAAe,CAACiB,UAAU,CAAC,IAAI,CAACP,cAAc,CAACI,EAAE,EAAEM,OAAO,CAAC,CAACZ,SAAS,CACxE,MAAK;MACH;MACA;MACA,IAAI,CAACF,mBAAmB,CAAC,IAAI,CAACI,cAAc,CAACI,EAAE,CAAC;MAChD,IAAI,CAACK,UAAU,GAAG,EAAE;IACtB,CAAC,EACAR,KAAK,IAAI;MACR;IAAA,CACD,CACF;EACH;EAEAW,aAAa,CAACC,SAAiB;IAC7B,IAAI,CAACvB,eAAe,CAACsB,aAAa,CAAC,IAAI,CAACZ,cAAc,CAACI,EAAE,EAAES,SAAS,CAAC,CAACf,SAAS,CAC7E,MAAK;MACH;MACA;MACA,IAAI,CAACF,mBAAmB,CAAC,IAAI,CAACI,cAAc,CAACI,EAAE,CAAC;IAClD,CAAC,EACAH,KAAK,IAAI;MACR;IAAA,CACD,CACF;EACH;CACD;AAnFYf,wBAAwB,eALpCD,SAAS,CAAC;EACT6B,QAAQ,EAAE,sBAAsB;EAChCC,WAAW,EAAE,mCAAmC;EAChDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GACW9B,wBAAwB,CAmFpC;SAnFYA,wBAAwB","names":["Component","ResourceDetailsComponent","constructor","route","router","resourceService","ngOnInit","resourceId","snapshot","paramMap","get","fetchResourceDetail","getResourceById","subscribe","resource","resourceDetail","error","shareResource","editResource","id","navigate","deleteResource","addComment","commentText","newComment","comment","text","deleteComment","commentId","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Components\\resource\\resource-details\\resource-details.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ResourceService } from '../../../Services/resource/resource.service';\nimport { Resource } from '../../../DTO/resource';\nimport { Comment } from '../../../DTO/comment';\n\n@Component({\n  selector: 'app-resource-details',\n  templateUrl: './resource-details.component.html',\n  styleUrls: ['./resource-details.component.scss']\n})\nexport class ResourceDetailsComponent implements OnInit {\n  resourceDetail: Resource;\n  newComment: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private resourceService: ResourceService\n  ) { }\n\n  ngOnInit(): void {\n    const resourceId = this.route.snapshot.paramMap.get('id');\n    if (resourceId) {\n      this.fetchResourceDetail(resourceId);\n    } else {\n      // Gérer le cas où l'ID de la ressource n'est pas disponible\n    }\n  }\n\n  fetchResourceDetail(resourceId: string): void {\n    this.resourceService.getResourceById(resourceId).subscribe(\n      (resource: Resource) => {\n        this.resourceDetail = resource;\n      },\n      (error) => {\n        // Gérer les erreurs ici\n      }\n    );\n  }\n\n  shareResource(): void {\n    // Logique de partage de la ressource\n    // Par exemple, ouvrir une boîte de dialogue avec le lien de partage\n  }\n\n  editResource(): void {\n    const resourceId = this.resourceDetail.id;\n    this.router.navigate(['/resource/edit', resourceId]);\n  }\n\n  deleteResource(): void {\n    const resourceId = this.resourceDetail.id;\n    this.resourceService.deleteResource(resourceId).subscribe(\n      () => {\n        // Gérer la suppression réussie ici\n        // Par exemple, rediriger vers la liste des ressources\n        this.router.navigate(['/resources']);\n      },\n      (error) => {\n        // Gérer les erreurs ici\n      }\n    );\n  }\n\n  addComment(): void {\n    const commentText = this.newComment;\n    const comment: Comment = { text: commentText };\n\n    this.resourceService.addComment(this.resourceDetail.id, comment).subscribe(\n      () => {\n        // Gérer l'ajout du commentaire réussi ici\n        // Par exemple, actualiser la liste des commentaires\n        this.fetchResourceDetail(this.resourceDetail.id);\n        this.newComment = '';\n      },\n      (error) => {\n        // Gérer les erreurs ici\n      }\n    );\n  }\n\n  deleteComment(commentId: string): void {\n    this.resourceService.deleteComment(this.resourceDetail.id, commentId).subscribe(\n      () => {\n        // Gérer la suppression du commentaire réussie ici\n        // Par exemple, actualiser la liste des commentaires\n        this.fetchResourceDetail(this.resourceDetail.id);\n      },\n      (error) => {\n        // Gérer les erreurs ici\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}