{"ast":null,"code":"/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\n// créé la classe ResourceService\nexport class ResourceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\n    this.apiUrl = 'http://localhost:3000/api/resources';\n  }\n  // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\n  // getResources(): Observable<Resource[]> {\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\n  //   });\n  //   return this.http.get<Resource[]>(this.apiUrl, { headers });\n  // }\n  // // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\n  // getResourceId(id: string): Observable<Resource> {\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\n  //   });\n  //   return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\n  // }\n  // // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\n  // createResource(resource: Resource): Observable<Resource> {\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\n  //   });\n  //   return this.http.post<Resource>(this.apiUrl, resource, { headers });\n  // }\n  // // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\n  // updateResource(id: string, resource: Resource): Observable<Resource> {\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\n  //   });\n  //   return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\n  // }\n  // // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\n  // deleteResource(id: string): Observable<Resource> {\n  //   const headers = new HttpHeaders({\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\n  //   });\n  //   return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\n  // }\n  getResourceId(id) {\n    return this.http.get(this.apiUrl + id);\n  }\n  getResources() {\n    return this.http.get(this.apiUrl);\n  }\n  post(Resource) {\n    return this.http.post(this.apiUrl, Resource);\n  }\n  update(Resource) {\n    return this.http.put(this.apiUrl, Resource);\n  }\n  delete(id) {\n    return this.http.delete(this.apiUrl + id);\n  }\n}","map":{"version":3,"mappings":"AACA;;;;;AAaA;AACA,OAAM,MAAOA,eAAe;EAK1BC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IALrB;IACQ,WAAM,GAAG,qCAAqC;EAKlD;EAEJ;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEAC,aAAa,CAACC,EAAS;IACnB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAW,IAAI,CAACC,MAAM,GAACF,EAAE,CAAC;EAClD;EACAG,YAAY;IACV,OAAO,IAAI,CAACN,IAAI,CAACI,GAAG,CAAa,IAAI,CAACC,MAAM,CAAC;EAC/C;EACAE,IAAI,CAACC,QAAQ;IACX,OAAO,IAAI,CAACR,IAAI,CAACO,IAAI,CAAW,IAAI,CAACF,MAAM,EAAEG,QAAQ,CAAC;EACxD;EACAC,MAAM,CAACD,QAAQ;IACb,OAAO,IAAI,CAACR,IAAI,CAACU,GAAG,CAAW,IAAI,CAACL,MAAM,EAAEG,QAAQ,CAAC;EACvD;EACAG,MAAM,CAACR,EAAS;IACd,OAAO,IAAI,CAACH,IAAI,CAACW,MAAM,CAAa,IAAI,CAACN,MAAM,GAACF,EAAE,CAAC;EACrD","names":["ResourceService","constructor","http","authService","getResourceId","id","get","apiUrl","getResources","post","Resource","update","put","delete"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["\r\n/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Resource } from '../../DTO/resource';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n\r\n// créé la classe ResourceService\r\nexport class ResourceService {\r\n\r\n  // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\r\n  private apiUrl = 'http://localhost:3000/api/resources';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\r\n  // getResources(): Observable<Resource[]> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.get<Resource[]>(this.apiUrl, { headers });\r\n  // }\r\n\r\n  // // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\r\n  // getResourceId(id: string): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  // }\r\n\r\n  // // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\r\n  // createResource(resource: Resource): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.post<Resource>(this.apiUrl, resource, { headers });\r\n  // }\r\n\r\n  // // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\r\n  // updateResource(id: string, resource: Resource): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\r\n  // }\r\n\r\n  // // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\r\n  // deleteResource(id: string): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  // }\r\n\r\n  getResourceId(id:number):Observable<Resource>{\r\n      return this.http.get<Resource>(this.apiUrl+id)\r\n  }\r\n  getResources():Observable<Resource[]>{\r\n    return this.http.get<Resource[]>(this.apiUrl);\r\n  }\r\n  post(Resource){\r\n    return this.http.post<Resource>(this.apiUrl, Resource);\r\n  }\r\n  update(Resource){\r\n    return this.http.put<Resource>(this.apiUrl, Resource);\r\n  }\r\n  delete(id:number){\r\n    return this.http.delete<Resource[]>(this.apiUrl+id);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}