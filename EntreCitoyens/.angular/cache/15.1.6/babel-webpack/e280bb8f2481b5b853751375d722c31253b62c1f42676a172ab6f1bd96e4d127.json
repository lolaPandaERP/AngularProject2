{"ast":null,"code":"import { Comment } from '../../DTO/comment';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ResourceService {\n  constructor() {\n    this.database = [{\n      id: '1',\n      title: 'Les relations citoyennes',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png',\n      createdBy: 'Lola CAILLAUD',\n      createdAt: '17/05/2023 à 12:10',\n      comments: [{\n        idComment: '1',\n        text: 'Premier commentaire'\n        // Autres propriétés de votre classe Comment\n      }]\n    }, {\n      id: '2',\n      title: 'Les relations citoyennes 2',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg',\n      createdBy: 'Clément RAFANEAU',\n      createdAt: '17/05/2023 à 12:15'\n    }, {\n      id: '3',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }, {\n      id: '4',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }, {\n      id: '6',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }, {\n      id: '7',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }, {\n      id: '8',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }];\n  }\n  getResources() {\n    return of(this.database);\n  }\n  getResourceById(id) {\n    const resource = this.database.find(r => r.id === id);\n    return of(resource);\n  }\n  createResource(resource) {\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\n    this.database.push(resource);\n    return of(resource);\n  }\n  updateResource(resource) {\n    const index = this.database.findIndex(r => r.id === resource.id);\n    if (index !== -1) {\n      this.database[index] = resource;\n      return of(this.database[index]);\n    }\n    return of(undefined);\n  }\n  deleteResource(id) {\n    const index = this.database.findIndex(r => r.id === id);\n    if (index !== -1) {\n      this.database.splice(index, 1);\n      return of(true);\n    }\n    return of(false);\n  }\n  shareResource(id, email) {\n    // Ici, tu peux implémenter la logique pour partager la ressource avec l'e-mail spécifié\n    // Cela pourrait inclure l'envoi d'un e-mail contenant un lien vers la ressource, par exemple\n    // Pour cet exemple, nous retournerons simplement une valeur booléenne pour indiquer si le partage a réussi ou non\n    // Recherche de la ressource par ID\n    const resource = this.database.find(r => r.id === id);\n    if (resource) {\n      // Implémenter ici la logique pour partager la ressource\n      console.log(`La ressource avec l'ID ${id} a été partagée avec l'e-mail ${email}`);\n      return of(true); // Simulation de succès du partage\n    }\n\n    return of(false); // La ressource n'a pas été trouvée, le partage a échoué\n  }\n\n  addComment(resourceId, comment) {\n    const resource = this.database.find(r => r.id === resourceId);\n    if (resource) {\n      if (!resource.comments) {\n        resource.comments = [];\n      }\n      const newComment = new Comment(comment.id, comment.text);\n      resource.comments.push(newComment);\n      return of(resource);\n    }\n    return of(undefined);\n  }\n  deleteComment(resourceId, commentId) {\n    const resource = this.database.find(r => r.id === resourceId);\n    if (resource && resource.comments) {\n      const commentIndex = resource.comments.findIndex(c => c.id === commentId);\n      if (commentIndex !== -1) {\n        resource.comments.splice(commentIndex, 1);\n        // Vous pouvez également appeler l'API pour supprimer le commentaire du backend ici\n      }\n    }\n  }\n}\n\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)();\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Comment","of","ResourceService","constructor","id","title","description","content","image_path","createdBy","createdAt","comments","idComment","text","getResources","database","getResourceById","resource","find","r","createResource","length","toString","push","updateResource","index","findIndex","undefined","deleteResource","splice","shareResource","email","console","log","addComment","resourceId","comment","newComment","deleteComment","commentId","commentIndex","c","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { Observable } from 'rxjs';\r\n// import { Resource } from '../../DTO/resource';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class ResourceService {\r\n//   private apiUrl = 'http://localhost:3000/api#/ressource';\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   getResources(): Observable<Resource[]> {\r\n//     return this.http.get<Resource[]>(this.apiUrl);\r\n//   }\r\n\r\n//   getResourceById(id: string): Observable<Resource> {\r\n//     return this.http.get<Resource>(`${this.apiUrl}/${id}`);\r\n//   }\r\n\r\n//   createResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.post<Resource>(this.apiUrl, resource);\r\n//   }\r\n\r\n//   updateResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.put<Resource>(`${this.apiUrl}/${resource.id}`, resource);\r\n//   }\r\n\r\n//   deleteResource(id: string): Observable<void> {\r\n//     return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n//   }\r\n// }\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Resource } from '../../DTO/resource';\r\nimport { Comment } from '../../DTO/comment';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResourceService {\r\n\r\n  private database: Resource[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Les relations citoyennes',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n      createdBy: 'Lola CAILLAUD',\r\n      createdAt: '17/05/2023 à 12:10',\r\n      comments: [\r\n        {\r\n          idComment: '1',\r\n          text: 'Premier commentaire',\r\n          // Autres propriétés de votre classe Comment\r\n        },\r\n      ]\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Les relations citoyennes 2',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n      createdBy: 'Clément RAFANEAU',\r\n      createdAt: '17/05/2023 à 12:15',\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    },\r\n    {\r\n      id: '6',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    },\r\n    {\r\n      id: '7',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    },\r\n    {\r\n      id: '8',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    }\r\n\r\n  ];\r\n\r\n  getResources(): Observable<Resource[]> {\r\n    return of(this.database);\r\n  }\r\n\r\n  getResourceById(id: string): Observable<Resource | undefined> {\r\n    const resource = this.database.find(r => r.id === id);\r\n    return of(resource);\r\n  }\r\n\r\n  createResource(resource: Resource): Observable<Resource> {\r\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\r\n    this.database.push(resource);\r\n    return of(resource);\r\n  }\r\n\r\n  updateResource(resource: Resource): Observable<Resource | undefined> {\r\n    const index = this.database.findIndex(r => r.id === resource.id);\r\n    if (index !== -1) {\r\n      this.database[index] = resource;\r\n      return of(this.database[index]);\r\n    }\r\n    return of(undefined);\r\n  }\r\n\r\n  deleteResource(id: string): Observable<boolean> {\r\n    const index = this.database.findIndex(r => r.id === id);\r\n    if (index !== -1) {\r\n      this.database.splice(index, 1);\r\n      return of(true);\r\n    }\r\n    return of(false);\r\n  }\r\n\r\n  shareResource(id: string, email: string): Observable<boolean> {\r\n    // Ici, tu peux implémenter la logique pour partager la ressource avec l'e-mail spécifié\r\n    // Cela pourrait inclure l'envoi d'un e-mail contenant un lien vers la ressource, par exemple\r\n    // Pour cet exemple, nous retournerons simplement une valeur booléenne pour indiquer si le partage a réussi ou non\r\n\r\n    // Recherche de la ressource par ID\r\n    const resource = this.database.find(r => r.id === id);\r\n\r\n    if (resource) {\r\n      // Implémenter ici la logique pour partager la ressource\r\n      console.log(`La ressource avec l'ID ${id} a été partagée avec l'e-mail ${email}`);\r\n      return of(true); // Simulation de succès du partage\r\n    }\r\n\r\n    return of(false); // La ressource n'a pas été trouvée, le partage a échoué\r\n  }\r\n\r\n  addComment(resourceId: string, comment: Comment): Observable<Resource | undefined> {\r\n    const resource = this.database.find(r => r.id === resourceId);\r\n    if (resource) {\r\n      if (!resource.comments) {\r\n        resource.comments = [];\r\n      }\r\n      const newComment = new Comment(comment.id, comment.text);\r\n      resource.comments.push(newComment);\r\n      return of(resource);\r\n    }\r\n    return of(undefined);\r\n  }\r\n\r\n\r\n  deleteComment(resourceId: string, commentId: string): void {\r\n    const resource = this.database.find(r => r.id === resourceId);\r\n    if (resource && resource.comments) {\r\n      const commentIndex = resource.comments.findIndex(c => c.id === commentId);\r\n      if (commentIndex !== -1) {\r\n        resource.comments.splice(commentIndex, 1);\r\n        // Vous pouvez également appeler l'API pour supprimer le commentaire du backend ici\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}