{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../Services/resource/resource.service\";\nimport * as i3 from \"@angular/router\";\nexport class ResourceEditComponent {\n  constructor(formBuilder, resourceService, router, route) {\n    this.formBuilder = formBuilder;\n    this.resourceService = resourceService;\n    this.router = router;\n    this.route = route;\n    const resourceId = this.route.snapshot.params['id'];\n    this.resourceService.getResourceById(resourceId).subscribe(resource => {\n      this.resource = resource;\n    }, error => {\n      // Gérer les erreurs ici\n    });\n    if (!this.resource) {\n      this.router.navigate(['/resources']);\n    }\n    this.editForm = this.formBuilder.group({\n      title: [this.resource.title, Validators.required],\n      description: [this.resource.description, Validators.required],\n      content: [this.resource.content, Validators.required],\n      imagePath: [this.resource.image_path, Validators.required],\n      createdBy: [this.resource.createdBy, Validators.required],\n      createdAt: [this.resource.createdAt, Validators.required]\n    });\n  }\n  updateResource() {\n    if (this.editForm.valid) {\n      const updatedResource = {\n        ...this.resource,\n        ...this.editForm.value\n      };\n      this.resourceService.updateResource(updatedResource);\n      this.router.navigate(['/resources']);\n    } else {\n      this.errorMessage = 'Veuillez remplir tous les champs du formulaire.';\n    }\n  }\n}\nResourceEditComponent.ɵfac = function ResourceEditComponent_Factory(t) {\n  return new (t || ResourceEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ResourceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nResourceEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResourceEditComponent,\n  selectors: [[\"app-resource-edit\"]],\n  decls: 2,\n  vars: 0,\n  template: function ResourceEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Edit Resource\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;AAUnE,OAAM,MAAOC,qBAAqB;EAKhCC,YACUC,WAAwB,EACxBC,eAAgC,EAChCC,MAAc,EACdC,KAAqB;IAHrB,gBAAW,GAAXH,WAAW;IACX,oBAAe,GAAfC,eAAe;IACf,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAEb,MAAMC,UAAU,GAAG,IAAI,CAACD,KAAK,CAACE,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IACnD,IAAI,CAACL,eAAe,CAACM,eAAe,CAACH,UAAU,CAAC,CAACI,SAAS,CACvDC,QAAkB,IAAI;MACrB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,EACAC,KAAK,IAAI;MACR;IAAA,CACD,CACF;IAED,IAAI,CAAC,IAAI,CAACD,QAAQ,EAAE;MAClB,IAAI,CAACP,MAAM,CAACS,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;IAGtC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACZ,WAAW,CAACa,KAAK,CAAC;MACrCC,KAAK,EAAE,CAAC,IAAI,CAACL,QAAQ,CAACK,KAAK,EAAEjB,UAAU,CAACkB,QAAQ,CAAC;MACjDC,WAAW,EAAE,CAAC,IAAI,CAACP,QAAQ,CAACO,WAAW,EAAEnB,UAAU,CAACkB,QAAQ,CAAC;MAC7DE,OAAO,EAAE,CAAC,IAAI,CAACR,QAAQ,CAACQ,OAAO,EAAEpB,UAAU,CAACkB,QAAQ,CAAC;MACrDG,SAAS,EAAE,CAAC,IAAI,CAACT,QAAQ,CAACU,UAAU,EAAEtB,UAAU,CAACkB,QAAQ,CAAC;MAC1DK,SAAS,EAAE,CAAC,IAAI,CAACX,QAAQ,CAACW,SAAS,EAAEvB,UAAU,CAACkB,QAAQ,CAAC;MACzDM,SAAS,EAAE,CAAC,IAAI,CAACZ,QAAQ,CAACY,SAAS,EAAExB,UAAU,CAACkB,QAAQ;KACzD,CAAC;EACJ;EAEAO,cAAc;IACZ,IAAI,IAAI,CAACV,QAAQ,CAACW,KAAK,EAAE;MACvB,MAAMC,eAAe,GAAa;QAAE,GAAG,IAAI,CAACf,QAAQ;QAAE,GAAG,IAAI,CAACG,QAAQ,CAACa;MAAK,CAAE;MAC9E,IAAI,CAACxB,eAAe,CAACqB,cAAc,CAACE,eAAe,CAAC;MACpD,IAAI,CAACtB,MAAM,CAACS,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;KACrC,MAAM;MACL,IAAI,CAACe,YAAY,GAAG,iDAAiD;;EAEzE;;AA3CW5B,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAA6B;EAAAC;EAAAC;EAAAC;IAAA;MCXjCC,0BAAI;MAAAA,6BAAa;MAAAA,iBAAK","names":["Validators","ResourceEditComponent","constructor","formBuilder","resourceService","router","route","resourceId","snapshot","params","getResourceById","subscribe","resource","error","navigate","editForm","group","title","required","description","content","imagePath","image_path","createdBy","createdAt","updateResource","valid","updatedResource","value","errorMessage","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Components\\resource\\resource-edit\\resource-edit.component.ts","C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Components\\resource\\resource-edit\\resource-edit.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ResourceService } from '../../../Services/resource/resource.service';\nimport { Resource } from '../../../DTO/resource';\n\n@Component({\n  selector: 'app-resource-edit',\n  templateUrl: './resource-edit.component.html',\n  styleUrls: ['./resource-edit.component.scss']\n})\nexport class ResourceEditComponent {\n  editForm: FormGroup;\n  errorMessage: string;\n  resource: Resource;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private resourceService: ResourceService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    const resourceId = this.route.snapshot.params['id'];\n    this.resourceService.getResourceById(resourceId).subscribe(\n      (resource: Resource) => {\n        this.resource = resource;\n      },\n      (error) => {\n        // Gérer les erreurs ici\n      }\n    );\n\n    if (!this.resource) {\n      this.router.navigate(['/resources']);\n    }\n\n    this.editForm = this.formBuilder.group({\n      title: [this.resource.title, Validators.required],\n      description: [this.resource.description, Validators.required],\n      content: [this.resource.content, Validators.required],\n      imagePath: [this.resource.image_path, Validators.required],\n      createdBy: [this.resource.createdBy, Validators.required],\n      createdAt: [this.resource.createdAt, Validators.required]\n    });\n  }\n\n  updateResource(): void {\n    if (this.editForm.valid) {\n      const updatedResource: Resource = { ...this.resource, ...this.editForm.value };\n      this.resourceService.updateResource(updatedResource);\n      this.router.navigate(['/resources']);\n    } else {\n      this.errorMessage = 'Veuillez remplir tous les champs du formulaire.';\n    }\n  }\n}\n"," <h2>Edit Resource</h2>\n<!--<div *ngIf=\"errorMessage\" class=\"error-message\">\n  {{ errorMessage }}\n</div>\n<form [formGroup]=\"editForm\" (ngSubmit)=\"updateResource()\">\n  <div class=\"form-group\">\n    <label for=\"title\">Title</label>\n    <input type=\"text\" id=\"title\" formControlName=\"title\" class=\"form-control\" required>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"description\">Description</label>\n    <textarea id=\"description\" formControlName=\"description\" class=\"form-control\" required></textarea>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"type\">Type</label>\n    <select id=\"type\" formControlName=\"type\" class=\"form-control\" required>\n      <option value=\"\">Select type</option>\n      <option value=\"photo\">Photo</option>\n      <option value=\"message\">Message</option>\n      <option value=\"article\">Article</option>\n    </select>\n  </div>\n  <button type=\"submit\" [disabled]=\"editForm.invalid\">Save Changes</button>\n</form> -->\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}