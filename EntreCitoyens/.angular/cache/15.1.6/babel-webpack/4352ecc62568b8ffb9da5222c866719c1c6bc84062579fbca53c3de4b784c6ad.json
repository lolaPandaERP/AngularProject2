{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ResourceService {\n  constructor() {\n    this.database = [{\n      id: '1',\n      title: 'Les relations citoyennes',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '/',\n      createdBy: 'Lola CAILLAUD',\n      createdAt: '17/05/2023 à 12:10'\n    }, {\n      id: '2',\n      title: 'Les relations citoyennes 2',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '...',\n      createdBy: 'Clément RAFANEAU',\n      createdAt: '17/05/2023 à 12:15'\n    }, {\n      id: '3',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '/',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }];\n  }\n  getResources() {\n    return this.database;\n  }\n  getResourceById(id) {\n    return this.database.find(resource => resource.id === id);\n  }\n  createResource(resource) {\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\n    this.database.push(resource);\n  }\n  updateResource(id, resource) {\n    const index = this.database.findIndex(item => item.id === id);\n    if (index !== -1) {\n      this.database[index] = {\n        ...resource,\n        id\n      };\n    }\n  }\n  deleteResource(id) {\n    const index = this.database.findIndex(item => item.id === id);\n    if (index !== -1) {\n      this.database.splice(index, 1);\n    }\n  }\n}\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)();\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,eAAe;EAH5BC;IAKE,aAAQ,GAAe,CACrB;MACEC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,0BAA0B;MACjCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,GAAG;MACfC,SAAS,EAAE,eAAe;MAC1BC,SAAS,EAAE;KACZ,EACD;MACEN,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE,kBAAkB;MAC7BC,SAAS,EAAE;KACZ,EACD;MACEN,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,GAAG;MACfC,SAAS,EAAE,gBAAgB;MAC3BC,SAAS,EAAE;KACZ,CACF;;EAEDC,YAAY;IACV,OAAO,IAAI,CAACC,QAAQ;EACtB;EAEAC,eAAe,CAACT,EAAU;IACxB,OAAO,IAAI,CAACQ,QAAQ,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACX,EAAE,KAAKA,EAAE,CAAC;EAC3D;EAEAY,cAAc,CAACD,QAAkB;IAC/BA,QAAQ,CAACX,EAAE,GAAG,CAAC,IAAI,CAACQ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAAC,CAAC;IACrD,IAAI,CAACN,QAAQ,CAACO,IAAI,CAACJ,QAAQ,CAAC;EAC9B;EAEAK,cAAc,CAAChB,EAAU,EAAEW,QAAkB;IAC3C,MAAMM,KAAK,GAAG,IAAI,CAACT,QAAQ,CAACU,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACnB,EAAE,KAAKA,EAAE,CAAC;IAC7D,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACT,QAAQ,CAACS,KAAK,CAAC,GAAG;QAAE,GAAGN,QAAQ;QAAEX;MAAE,CAAE;;EAE9C;EAEAoB,cAAc,CAACpB,EAAU;IACvB,MAAMiB,KAAK,GAAG,IAAI,CAACT,QAAQ,CAACU,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACnB,EAAE,KAAKA,EAAE,CAAC;IAC7D,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACT,QAAQ,CAACa,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;;EAElC;;AAzDWnB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAwB,SAAfxB,eAAe;EAAAyB,YAFd;AAAM","names":["ResourceService","constructor","id","title","description","content","image_path","createdBy","createdAt","getResources","database","getResourceById","find","resource","createResource","length","toString","push","updateResource","index","findIndex","item","deleteResource","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Resource } from '../../DTO/resource';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResourceService {\r\n\r\n  database: Resource[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Les relations citoyennes',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '/',\r\n      createdBy: 'Lola CAILLAUD',\r\n      createdAt: '17/05/2023 à 12:10'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Les relations citoyennes 2',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '...',\r\n      createdBy: 'Clément RAFANEAU',\r\n      createdAt: '17/05/2023 à 12:15'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '/',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    }\r\n  ];\r\n\r\n  getResources(): Resource[] {\r\n    return this.database;\r\n  }\r\n\r\n  getResourceById(id: string): Resource | undefined {\r\n    return this.database.find(resource => resource.id === id);\r\n  }\r\n\r\n  createResource(resource: Resource): void {\r\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\r\n    this.database.push(resource);\r\n  }\r\n\r\n  updateResource(id: string, resource: Resource): void {\r\n    const index = this.database.findIndex(item => item.id === id);\r\n    if (index !== -1) {\r\n      this.database[index] = { ...resource, id };\r\n    }\r\n  }\r\n\r\n  deleteResource(id: string): void {\r\n    const index = this.database.findIndex(item => item.id === id);\r\n    if (index !== -1) {\r\n      this.database.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}