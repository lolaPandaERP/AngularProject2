{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ResourceService {\n  constructor() {\n    this.database = [{\n      id: '1',\n      title: 'Les relations citoyennes',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png',\n      createdBy: 'Lola CAILLAUD',\n      createdAt: '17/05/2023 à 12:10'\n    }, {\n      id: '2',\n      title: 'Les relations citoyennes 2',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg',\n      createdBy: 'Clément RAFANEAU',\n      createdAt: '17/05/2023 à 12:15'\n    }, {\n      id: '3',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg',\n      createdBy: 'Virgile FOUCHE',\n      createdAt: '17/05/2023 à 12:20'\n    }];\n  }\n  getResources() {\n    return of(this.database);\n  }\n  getResourceById(id) {\n    const resource = this.database.find(r => r.id === id);\n    return of(resource);\n  }\n  createResource(resource) {\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\n    this.database.push(resource);\n    return of(resource);\n  }\n  updateResource(resource) {\n    const index = this.database.findIndex(r => r.id === resource.id);\n    if (index !== -1) {\n      this.database[index] = resource;\n      return of(this.database[index]);\n    }\n    return of(undefined);\n  }\n  deleteResource(id) {\n    const index = this.database.findIndex(r => r.id === id);\n    if (index !== -1) {\n      this.database.splice(index, 1);\n      return of(true);\n    }\n    return of(false);\n  }\n}\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)();\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAqCA,SAAqBA,EAAE,QAAQ,MAAM;;AAKrC,OAAM,MAAOC,eAAe;EAH5BC;IAIU,aAAQ,GAAe,CAC7B;MACEC,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,0BAA0B;MACjCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,0CAA0C;MACtDC,SAAS,EAAE,eAAe;MAC1BC,SAAS,EAAE;KACZ,EACD;MACEN,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,0CAA0C;MACtDC,SAAS,EAAE,kBAAkB;MAC7BC,SAAS,EAAE;KACZ,EACD;MACEN,EAAE,EAAE,GAAG;MACPC,KAAK,EAAE,4BAA4B;MACnCC,WAAW,EAAE,wDAAwD;MACrEC,OAAO,EAAE,0BAA0B;MACnCC,UAAU,EAAE,0CAA0C;MACtDC,SAAS,EAAE,gBAAgB;MAC3BC,SAAS,EAAE;KACZ,CACF;;EAEDC,YAAY;IACV,OAAOV,EAAE,CAAC,IAAI,CAACW,QAAQ,CAAC;EAC1B;EAEAC,eAAe,CAACT,EAAU;IACxB,MAAMU,QAAQ,GAAG,IAAI,CAACF,QAAQ,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;IACrD,OAAOH,EAAE,CAACa,QAAQ,CAAC;EACrB;EAEAG,cAAc,CAACH,QAAkB;IAC/BA,QAAQ,CAACV,EAAE,GAAG,CAAC,IAAI,CAACQ,QAAQ,CAACM,MAAM,GAAG,CAAC,EAAEC,QAAQ,EAAE,CAAC,CAAC;IACrD,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAACN,QAAQ,CAAC;IAC5B,OAAOb,EAAE,CAACa,QAAQ,CAAC;EACrB;EAEAO,cAAc,CAACP,QAAkB;IAC/B,MAAMQ,KAAK,GAAG,IAAI,CAACV,QAAQ,CAACW,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKU,QAAQ,CAACV,EAAE,CAAC;IAChE,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACV,QAAQ,CAACU,KAAK,CAAC,GAAGR,QAAQ;MAC/B,OAAOb,EAAE,CAAC,IAAI,CAACW,QAAQ,CAACU,KAAK,CAAC,CAAC;;IAEjC,OAAOrB,EAAE,CAACuB,SAAS,CAAC;EACtB;EAEAC,cAAc,CAACrB,EAAU;IACvB,MAAMkB,KAAK,GAAG,IAAI,CAACV,QAAQ,CAACW,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC;IACvD,IAAIkB,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACV,QAAQ,CAACc,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;MAC9B,OAAOrB,EAAE,CAAC,IAAI,CAAC;;IAEjB,OAAOA,EAAE,CAAC,KAAK,CAAC;EAClB;;AA9DWC,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAyB,SAAfzB,eAAe;EAAA0B,YAFd;AAAM","names":["of","ResourceService","constructor","id","title","description","content","image_path","createdBy","createdAt","getResources","database","getResourceById","resource","find","r","createResource","length","toString","push","updateResource","index","findIndex","undefined","deleteResource","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { Observable } from 'rxjs';\r\n// import { Resource } from '../../DTO/resource';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class ResourceService {\r\n//   private apiUrl = 'http://localhost:3000/api#/ressource';\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   getResources(): Observable<Resource[]> {\r\n//     return this.http.get<Resource[]>(this.apiUrl);\r\n//   }\r\n\r\n//   getResourceById(id: string): Observable<Resource> {\r\n//     return this.http.get<Resource>(`${this.apiUrl}/${id}`);\r\n//   }\r\n\r\n//   createResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.post<Resource>(this.apiUrl, resource);\r\n//   }\r\n\r\n//   updateResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.put<Resource>(`${this.apiUrl}/${resource.id}`, resource);\r\n//   }\r\n\r\n//   deleteResource(id: string): Observable<void> {\r\n//     return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n//   }\r\n// }\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Resource } from '../../DTO/resource';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResourceService {\r\n  private database: Resource[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Les relations citoyennes',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n      createdBy: 'Lola CAILLAUD',\r\n      createdAt: '17/05/2023 à 12:10'\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Les relations citoyennes 2',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n      createdBy: 'Clément RAFANEAU',\r\n      createdAt: '17/05/2023 à 12:15'\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n      createdBy: 'Virgile FOUCHE',\r\n      createdAt: '17/05/2023 à 12:20'\r\n    }\r\n  ];\r\n\r\n  getResources(): Observable<Resource[]> {\r\n    return of(this.database);\r\n  }\r\n\r\n  getResourceById(id: string): Observable<Resource | undefined> {\r\n    const resource = this.database.find(r => r.id === id);\r\n    return of(resource);\r\n  }\r\n\r\n  createResource(resource: Resource): Observable<Resource> {\r\n    resource.id = (this.database.length + 1).toString(); // Génère un ID unique\r\n    this.database.push(resource);\r\n    return of(resource);\r\n  }\r\n\r\n  updateResource(resource: Resource): Observable<Resource | undefined> {\r\n    const index = this.database.findIndex(r => r.id === resource.id);\r\n    if (index !== -1) {\r\n      this.database[index] = resource;\r\n      return of(this.database[index]);\r\n    }\r\n    return of(undefined);\r\n  }\r\n\r\n  deleteResource(id: string): Observable<boolean> {\r\n    const index = this.database.findIndex(r => r.id === id);\r\n    if (index !== -1) {\r\n      this.database.splice(index, 1);\r\n      return of(true);\r\n    }\r\n    return of(false);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}