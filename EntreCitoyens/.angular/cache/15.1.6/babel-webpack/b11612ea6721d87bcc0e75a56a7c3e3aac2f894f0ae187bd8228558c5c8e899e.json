{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SkillService {\n  // Constructeur\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // If not API implemented\n    this.database = {\n      skill: [{\n        id: 1,\n        name: \".NET\",\n        text: \"text .NET\"\n      }, {\n        id: 2,\n        name: \"Angular\",\n        text: \"text Angular\"\n      }, {\n        id: 3,\n        name: \"DDD\",\n        text: \"text .NET\"\n      }]\n    };\n    /**\r\n     * If API implemented, make routes for each endoints of application\r\n    **/\n    this.endpoint = \"https:/localhost/swagger\";\n    this.getEndPoint = this.endpoint + \"/GetAll\";\n  }\n  // WITH API\n  get(id) {\n    return this.httpClient.get(this.getEndPoint + id);\n  }\n  getAll() {\n    return this.httpClient.get(this.getEndPoint);\n  }\n  post(skill) {\n    return this.httpClient.post(this.getEndPoint, skill);\n  }\n  update(skill) {\n    return this.httpClient.put(this.getEndPoint, skill);\n  }\n  delete(id) {\n    return this.httpClient.delete(this.getEndPoint + id);\n  }\n}\nSkillService.ɵfac = function SkillService_Factory(t) {\n  return new (t || SkillService)(i0.ɵɵinject(i1.HttpClient));\n};\nSkillService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SkillService,\n  factory: SkillService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,YAAY;EA8BvB;EACAC,YAAoBC,UAAqB;IAArB,eAAU,GAAVA,UAAU;IA7B9B;IACA,aAAQ,GAAG;MACTC,KAAK,EAAE,CACL;QACEC,EAAE,EAAC,CAAC;QACJC,IAAI,EAAC,MAAM;QACXC,IAAI,EAAC;OACN,EACD;QACEF,EAAE,EAAC,CAAC;QACJC,IAAI,EAAC,SAAS;QACdC,IAAI,EAAC;OACN,EACD;QACEF,EAAE,EAAC,CAAC;QACJC,IAAI,EAAC,KAAK;QACVC,IAAI,EAAC;OACN;KAEJ;IAED;;;IAIO,aAAQ,GAAG,0BAA0B;IACrC,gBAAW,GAAG,IAAI,CAACC,QAAQ,GAAC,SAAS;EAGC;EAE7C;EAEAC,GAAG,CAACJ,EAAS;IACT,OAAO,IAAI,CAACF,UAAU,CAACM,GAAG,CAAQ,IAAI,CAACC,WAAW,GAACL,EAAE,CAAC;EAC1D;EAEAM,MAAM;IACJ,OAAO,IAAI,CAACR,UAAU,CAACM,GAAG,CAAU,IAAI,CAACC,WAAW,CAAC;EACvD;EACAE,IAAI,CAACR,KAAK;IACR,OAAO,IAAI,CAACD,UAAU,CAACS,IAAI,CAAQ,IAAI,CAACF,WAAW,EAAEN,KAAK,CAAC;EAC7D;EAEAS,MAAM,CAACT,KAAK;IACV,OAAO,IAAI,CAACD,UAAU,CAACW,GAAG,CAAQ,IAAI,CAACJ,WAAW,EAAEN,KAAK,CAAC;EAC5D;EACAW,MAAM,CAACV,EAAS;IACd,OAAO,IAAI,CAACF,UAAU,CAACY,MAAM,CAAU,IAAI,CAACL,WAAW,GAACL,EAAE,CAAC;EAC7D;;AAnDWJ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAe,SAAZf,YAAY;EAAAgB,YAFX;AAAM","names":["SkillService","constructor","httpClient","skill","id","name","text","endpoint","get","getEndPoint","getAll","post","update","put","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\laragon\\www\\angular\\AngularProject\\src\\app\\services\\skill.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Skill } from '../DTO/skill.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SkillService {\n\n  // If not API implemented\n  database = {\n    skill: [\n      {\n        id:1,\n        name:\".NET\",\n        text:\"text .NET\"\n      },\n      {\n        id:2,\n        name:\"Angular\",\n        text:\"text Angular\"\n      },\n      {\n        id:3,\n        name:\"DDD\",\n        text:\"text .NET\"\n      }\n    ],\n  }\n\n  /**\n   * If API implemented, make routes for each endoints of application\n  **/\n\n  public endpoint = \"https:/localhost/swagger\";\n  public getEndPoint = this.endpoint+\"/GetAll\";\n\n  // Constructeur\n  constructor(private httpClient:HttpClient) { }\n\n  // WITH API\n\n  get(id:number):Observable<Skill>{\n      return this.httpClient.get<Skill>(this.getEndPoint+id)\n  }\n\n  getAll():Observable<Skill[]>{\n    return this.httpClient.get<Skill[]>(this.getEndPoint);\n  }\n  post(skill){\n    return this.httpClient.post<Skill>(this.getEndPoint, skill);\n  }\n\n  update(skill){\n    return this.httpClient.put<Skill>(this.getEndPoint, skill);\n  }\n  delete(id:number){\n    return this.httpClient.delete<Skill[]>(this.getEndPoint+id);\n  }\n\n  // // WITHOUT API\n  // getFromDB(id){\n  //   return this.database.skill.find(x => x.id == id);\n  // }\n\n  // getAllFromDB(){\n  //   return this.database.skill;\n  // }\n\n  // postFromDB(skill){\n  //    this.httpClient.post<Skill>(this.getEndPoint, skill);\n  // }\n\n  // deleteFromDB(id){\n  //   this.httpClient.delete<Skill>(this.getEndPoint+id);\n  // }\n\n  // updateFomDB(skill){\n  //   let query = this.database.skill.findIndex(x => x.id == skill.id);\n\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}