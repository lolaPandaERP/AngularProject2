{"ast":null,"code":"/**\r\n  * importé les modules Injectable, http, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\n// créé la classe ResourceService\nexport class ResourceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\n    this.apiUrl = 'http://localhost:3000/api/resources';\n    // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\n    // getResources(): Observable<Resource[]> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': `Bearer ${this.authService.getToken()}`\n    //   });\n    //   return this.http.get<Resource[]>(this.apiUrl, { headers });\n    // }\n    // // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\n    // getResourceId(id: string): Observable<Resource> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': `Bearer ${this.authService.getToken()}`\n    //   });\n    //   return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\n    // }\n    // // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\n    // createResource(resource: Resource): Observable<Resource> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': `Bearer ${this.authService.getToken()}`\n    //   });\n    //   return this.http.post<Resource>(this.apiUrl, resource, { headers });\n    // }\n    // // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\n    // updateResource(id: string, resource: Resource): Observable<Resource> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': `Bearer ${this.authService.getToken()}`\n    //   });\n    //   return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\n    // }\n    // // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\n    // deleteResource(id: string): Observable<Resource> {\n    //   const headers = new HttpHeaders({\n    //     'Authorization': `Bearer ${this.authService.getToken()}`\n    //   });\n    //   return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\n    // }\n    // getResourceId(id:string):Observable<Resource>{\n    //     return this.http.get<Resource>(this.apiUrl+id)\n    // }\n    // getResources():Observable<Resource[]>{\n    //   return this.http.get<Resource[]>(this.apiUrl);\n    // }\n    // post(Resource){\n    //   return this.http.post<Resource>(this.apiUrl, Resource);\n    // }\n    // update(Resource){\n    //   return this.http.put<Resource>(this.apiUrl, Resource);\n    // }\n    // delete(id:string){\n    //   return this.http.delete<Resource[]>(this.apiUrl+id);\n    // }\n    this.endpoint = \"https:/localhost/swagger\";\n    this.getEndPoint = this.endpoint + \"/GetAll\";\n    // If not API implemented\n    this.database = {\n      resource: [{\n        id: 1,\n        title: \"Les relations citoyennes\",\n        description: \"description de l'article sur les relations citoyennes\",\n        content: \"...\",\n        createdBy: \"Lola CAILLAUD\",\n        createdAt: \"17/05/2023 à 12:10\"\n      }, {\n        id: 2,\n        title: \"Les relations citoyennes 2\",\n        description: \"description de l'article sur les relations citoyennes\",\n        content: \"...\",\n        createdBy: \"Clément RAFANEAU\",\n        createdAt: \"17/05/2023 à 12:15\"\n      }, {\n        id: 3,\n        title: \"Les relations citoyennes 3 \",\n        description: \"description de l'article sur les relations citoyennes\",\n        content: \"...\",\n        createdBy: \"Virgile FOUCHE\",\n        createdAt: \"17/05/2023 à 12:20\"\n      }]\n    };\n  }\n  // WITHOUT API\n  getFromDB(id) {\n    return this.database.resource.find(x => x.id == id);\n  }\n  getAllFromDB() {\n    return this.database.resource;\n  }\n  postFromDB(resource) {\n    this.http.post(this.getEndPoint, resource);\n  }\n  deleteFromDB(id) {\n    this.http.delete(this.getEndPoint + id);\n  }\n  updateFomDB(resource) {\n    let query = this.database.resource.findIndex(x => x.id == resource.id);\n  }\n}","map":{"version":3,"mappings":"AACA;;;;;AAaA;AACA,OAAM,MAAOA,eAAe;EAK1BC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IALrB;IACQ,WAAM,GAAG,qCAAqC;IAOtD;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEO,aAAQ,GAAG,0BAA0B;IACrC,gBAAW,GAAG,IAAI,CAACC,QAAQ,GAAC,SAAS;IAE3C;IACA,aAAQ,GAAG;MACVC,QAAQ,EAAE,CACR;QACEC,EAAE,EAAC,CAAC;QACJC,KAAK,EAAC,0BAA0B;QAChCC,WAAW,EAAC,uDAAuD;QACnEC,OAAO,EAAC,KAAK;QACbC,SAAS,EAAC,eAAe;QACzBC,SAAS,EAAC;OACX,EACD;QACEL,EAAE,EAAC,CAAC;QACJC,KAAK,EAAC,4BAA4B;QAClCC,WAAW,EAAC,uDAAuD;QACnEC,OAAO,EAAC,KAAK;QACbC,SAAS,EAAC,kBAAkB;QAC5BC,SAAS,EAAC;OACX,EACD;QACEL,EAAE,EAAC,CAAC;QACJC,KAAK,EAAC,6BAA6B;QACnCC,WAAW,EAAC,uDAAuD;QACnEC,OAAO,EAAC,KAAK;QACbC,SAAS,EAAC,gBAAgB;QAC1BC,SAAS,EAAC;OACX;KAEJ;EA9FG;EAiGJ;EACAC,SAAS,CAACN,EAAE;IACV,OAAO,IAAI,CAACO,QAAQ,CAACR,QAAQ,CAACS,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACT,EAAE,IAAIA,EAAE,CAAC;EACrD;EAEAU,YAAY;IACV,OAAO,IAAI,CAACH,QAAQ,CAACR,QAAQ;EAC/B;EAEAY,UAAU,CAACZ,QAAQ;IAChB,IAAI,CAACH,IAAI,CAACgB,IAAI,CAAW,IAAI,CAACC,WAAW,EAAEd,QAAQ,CAAC;EACvD;EAEAe,YAAY,CAACd,EAAE;IACb,IAAI,CAACJ,IAAI,CAACmB,MAAM,CAAW,IAAI,CAACF,WAAW,GAACb,EAAE,CAAC;EACjD;EAEAgB,WAAW,CAACjB,QAAQ;IAClB,IAAIkB,KAAK,GAAG,IAAI,CAACV,QAAQ,CAACR,QAAQ,CAACmB,SAAS,CAACT,CAAC,IAAIA,CAAC,CAACT,EAAE,IAAID,QAAQ,CAACC,EAAE,CAAC;EAExE","names":["ResourceService","constructor","http","authService","endpoint","resource","id","title","description","content","createdBy","createdAt","getFromDB","database","find","x","getAllFromDB","postFromDB","post","getEndPoint","deleteFromDB","delete","updateFomDB","query","findIndex"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["\r\n/**\r\n  * importé les modules Injectable, http, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Resource } from '../../DTO/resource';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n\r\n// créé la classe ResourceService\r\nexport class ResourceService {\r\n\r\n  // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\r\n  private apiUrl = 'http://localhost:3000/api/resources';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\r\n  // getResources(): Observable<Resource[]> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.get<Resource[]>(this.apiUrl, { headers });\r\n  // }\r\n\r\n  // // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\r\n  // getResourceId(id: string): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  // }\r\n\r\n  // // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\r\n  // createResource(resource: Resource): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.post<Resource>(this.apiUrl, resource, { headers });\r\n  // }\r\n\r\n  // // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\r\n  // updateResource(id: string, resource: Resource): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\r\n  // }\r\n\r\n  // // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\r\n  // deleteResource(id: string): Observable<Resource> {\r\n  //   const headers = new HttpHeaders({\r\n  //     'Authorization': `Bearer ${this.authService.getToken()}`\r\n  //   });\r\n\r\n  //   return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  // }\r\n\r\n  // getResourceId(id:string):Observable<Resource>{\r\n  //     return this.http.get<Resource>(this.apiUrl+id)\r\n  // }\r\n  // getResources():Observable<Resource[]>{\r\n  //   return this.http.get<Resource[]>(this.apiUrl);\r\n  // }\r\n  // post(Resource){\r\n  //   return this.http.post<Resource>(this.apiUrl, Resource);\r\n  // }\r\n  // update(Resource){\r\n  //   return this.http.put<Resource>(this.apiUrl, Resource);\r\n  // }\r\n  // delete(id:string){\r\n  //   return this.http.delete<Resource[]>(this.apiUrl+id);\r\n  // }\r\n\r\n  public endpoint = \"https:/localhost/swagger\";\r\n  public getEndPoint = this.endpoint+\"/GetAll\";\r\n\r\n   // If not API implemented\r\n   database = {\r\n    resource: [\r\n      {\r\n        id:1,\r\n        title:\"Les relations citoyennes\",\r\n        description:\"description de l'article sur les relations citoyennes\",\r\n        content:\"...\",\r\n        createdBy:\"Lola CAILLAUD\",\r\n        createdAt:\"17/05/2023 à 12:10\",\r\n      },\r\n      {\r\n        id:2,\r\n        title:\"Les relations citoyennes 2\",\r\n        description:\"description de l'article sur les relations citoyennes\",\r\n        content:\"...\",\r\n        createdBy:\"Clément RAFANEAU\",\r\n        createdAt:\"17/05/2023 à 12:15\",\r\n      },\r\n      {\r\n        id:3,\r\n        title:\"Les relations citoyennes 3 \",\r\n        description:\"description de l'article sur les relations citoyennes\",\r\n        content:\"...\",\r\n        createdBy:\"Virgile FOUCHE\",\r\n        createdAt:\"17/05/2023 à 12:20\",\r\n      }\r\n    ],\r\n  }\r\n\r\n\r\n  // WITHOUT API\r\n  getFromDB(id){\r\n    return this.database.resource.find(x => x.id == id);\r\n  }\r\n\r\n  getAllFromDB(){\r\n    return this.database.resource;\r\n  }\r\n\r\n  postFromDB(resource){\r\n     this.http.post<Resource>(this.getEndPoint, resource);\r\n  }\r\n\r\n  deleteFromDB(id){\r\n    this.http.delete<Resource>(this.getEndPoint+id);\r\n  }\r\n\r\n  updateFomDB(resource){\r\n    let query = this.database.resource.findIndex(x => x.id == resource.id);\r\n\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}