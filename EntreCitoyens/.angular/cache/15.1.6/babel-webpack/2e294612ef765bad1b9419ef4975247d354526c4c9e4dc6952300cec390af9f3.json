{"ast":null,"code":"/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\nimport { HttpHeaders } from '@angular/common/http';\n// créé la classe ResourceService\nexport class ResourceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\n    this.apiUrl = 'http://localhost:3000/api/resources';\n  }\n  // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\n  getResources() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.get(this.apiUrl, {\n      headers\n    });\n  }\n  // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\n  getResource(id) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers\n    });\n  }\n  // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\n  createResource(resource) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.post(this.apiUrl, resource, {\n      headers\n    });\n  }\n  // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\n  updateResource(id, resource) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.put(`${this.apiUrl}/${id}`, resource, {\n      headers\n    });\n  }\n  // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\n  deleteResource(id) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers\n    });\n  }\n}","map":{"version":3,"mappings":"AACA;;;;;AAMA,SAAqBA,WAAW,QAAQ,sBAAsB;AAO9D;AACA,OAAM,MAAOC,eAAe;EAK1BC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IALrB;IACQ,WAAM,GAAG,qCAAqC;EAKlD;EAEJ;EACAC,YAAY;IACV,MAAMC,OAAO,GAAG,IAAIN,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACG,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,IAAI,CAACC,MAAM,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC5D;EAEA;EACAI,WAAW,CAACC,EAAU;IACpB,MAAML,OAAO,GAAG,IAAIN,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACG,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,EAAE;MAAEL;IAAO,CAAE,CAAC;EACrE;EAEA;EACAM,cAAc,CAACC,QAAkB;IAC/B,MAAMP,OAAO,GAAG,IAAIN,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACG,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAW,IAAI,CAACL,MAAM,EAAEI,QAAQ,EAAE;MAAEP;IAAO,CAAE,CAAC;EACrE;EAEA;EACAS,cAAc,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,MAAMP,OAAO,GAAG,IAAIN,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACG,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAEE,QAAQ,EAAE;MAAEP;IAAO,CAAE,CAAC;EAC/E;EAEA;EACAW,cAAc,CAACN,EAAU;IACvB,MAAML,OAAO,GAAG,IAAIN,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACI,WAAW,CAACG,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACe,MAAM,CAAW,GAAG,IAAI,CAACT,MAAM,IAAIE,EAAE,EAAE,EAAE;MAAEL;IAAO,CAAE,CAAC;EACxE","names":["HttpHeaders","ResourceService","constructor","http","authService","getResources","headers","getToken","get","apiUrl","getResource","id","createResource","resource","post","updateResource","put","deleteResource","delete"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["\r\n/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n*/\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Resource } from '../../DTO/resource';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n\r\n// créé la classe ResourceService\r\nexport class ResourceService {\r\n\r\n  // initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\r\n  private apiUrl = 'http://localhost:3000/api/resources';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  // défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\r\n  getResources(): Observable<Resource[]> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.get<Resource[]>(this.apiUrl, { headers });\r\n  }\r\n\r\n  // défini la méthode getResource qui récupère une ressource spécifique en appelant la méthode get du module HttpClient avec l'ID de la ressource et retourne une ressource typée avec l'interface Resource ;\r\n  getResource(id: string): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  }\r\n\r\n  // défini la méthode createResource qui crée une nouvelle ressource en appelant la méthode post du module HttpClient avec une nouvelle ressource et retourne la ressource créée typée avec l'interface Resource ;\r\n  createResource(resource: Resource): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.post<Resource>(this.apiUrl, resource, { headers });\r\n  }\r\n\r\n  // défini la méthode updateResource qui met à jour une ressource spécifique en appelant la méthode put du module HttpClient avec l'ID de la ressource et la ressource mise à jour, et retourne la ressource mise à jour typée avec l'interface Resource ;\r\n  updateResource(id: string, resource: Resource): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\r\n  }\r\n\r\n  // défini la méthode deleteResource qui supprime une ressource spécifique en appelant la méthode delete du module HttpClient avec l'ID de la ressource et retourne la ressource supprimée\r\n  deleteResource(id: string): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}