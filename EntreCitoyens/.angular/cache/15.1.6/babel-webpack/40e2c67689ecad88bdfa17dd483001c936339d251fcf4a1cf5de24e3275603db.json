{"ast":null,"code":"/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n  * créé la classe ResourceService qui est annotée avec le décorateur @Injectable pour l'enregistrer en tant que service injectable dans l'application ;\r\n  * initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\r\n  * défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\r\n*/\nimport { HttpHeaders } from '@angular/common/http';\n// import { AuthService } from '../auth/auth.service';\nexport class ResourceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/resources';\n  }\n  getResources() {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.get(this.apiUrl, {\n      headers\n    });\n  }\n  getResource(id) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.get(`${this.apiUrl}/${id}`, {\n      headers\n    });\n  }\n  createResource(resource) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.post(this.apiUrl, resource, {\n      headers\n    });\n  }\n  updateResource(id, resource) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.put(`${this.apiUrl}/${id}`, resource, {\n      headers\n    });\n  }\n  deleteResource(id) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${this.authService.getToken()}`\n    });\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers\n    });\n  }\n}","map":{"version":3,"mappings":"AACA;;;;;;;;AASA,SAAqBA,WAAW,QAAQ,sBAAsB;AAI9D;AAEA,OAAM,MAAOC,eAAe;EAG1BC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHN,WAAM,GAAG,qCAAqC;EAKlD;EAEJC,YAAY;IACV,MAAMC,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACM,WAAW,CAACC,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,IAAI,CAACC,MAAM,EAAE;MAAEJ;IAAO,CAAE,CAAC;EAC5D;EAEAK,WAAW,CAACC,EAAU;IACpB,MAAMN,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACM,WAAW,CAACC,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAW,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EACrE;EAEAO,cAAc,CAACC,QAAkB;IAC/B,MAAMR,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACM,WAAW,CAACC,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAW,IAAI,CAACL,MAAM,EAAEI,QAAQ,EAAE;MAAER;IAAO,CAAE,CAAC;EACrE;EAEAU,cAAc,CAACJ,EAAU,EAAEE,QAAkB;IAC3C,MAAMR,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACM,WAAW,CAACC,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACa,GAAG,CAAW,GAAG,IAAI,CAACP,MAAM,IAAIE,EAAE,EAAE,EAAEE,QAAQ,EAAE;MAAER;IAAO,CAAE,CAAC;EAC/E;EAEAY,cAAc,CAACN,EAAU;IACvB,MAAMN,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAU,IAAI,CAACM,WAAW,CAACC,QAAQ,EAAE;KACvD,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACe,MAAM,CAAW,GAAG,IAAI,CAACT,MAAM,IAAIE,EAAE,EAAE,EAAE;MAAEN;IAAO,CAAE,CAAC;EACxE","names":["HttpHeaders","ResourceService","constructor","http","getResources","headers","authService","getToken","get","apiUrl","getResource","id","createResource","resource","post","updateResource","put","deleteResource","delete"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\resource\\resource.service.ts"],"sourcesContent":["\r\n/**\r\n  * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants ;\r\n  * importé l'interface Resource depuis le fichier resource.ts ;\r\n  * importé le service AuthService depuis son fichier correspondant ;\r\n  * créé la classe ResourceService qui est annotée avec le décorateur @Injectable pour l'enregistrer en tant que service injectable dans l'application ;\r\n  * initialisé la propriété apiUrl qui contient l'URL de l'API de ressources ;\r\n  * défini la méthode getResources qui récupère toutes les ressources en appelant la méthode get du module HttpClient et retourne un tableau de ressources typé avec l'interface Resource\r\n*/\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { Resource } from '../../DTO/resource';\r\n// import { AuthService } from '../auth/auth.service';\r\n\r\nexport class ResourceService {\r\n  private apiUrl = 'http://localhost:3000/api/resources';\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    // private authService: AuthService\r\n  ) { }\r\n\r\n  getResources(): Observable<Resource[]> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.get<Resource[]>(this.apiUrl, { headers });\r\n  }\r\n\r\n  getResource(id: string): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.get<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  }\r\n\r\n  createResource(resource: Resource): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.post<Resource>(this.apiUrl, resource, { headers });\r\n  }\r\n\r\n  updateResource(id: string, resource: Resource): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.put<Resource>(`${this.apiUrl}/${id}`, resource, { headers });\r\n  }\r\n\r\n  deleteResource(id: string): Observable<Resource> {\r\n    const headers = new HttpHeaders({\r\n      'Authorization': `Bearer ${this.authService.getToken()}`\r\n    });\r\n\r\n    return this.http.delete<Resource>(`${this.apiUrl}/${id}`, { headers });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}