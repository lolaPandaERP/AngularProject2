{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CategoryService {\n  constructor() {\n    this.database = [{\n      id: '1',\n      title: 'Les relations citoyennes',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png'\n    }, {\n      id: '2',\n      title: 'Les relations citoyennes 2',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg'\n    }, {\n      id: '3',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png'\n    }, {\n      id: '4',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image1.jpg'\n    }, {\n      id: '5',\n      title: 'Les relations citoyennes 3',\n      description: 'Description de l\\'article sur les relations citoyennes',\n      content: 'Contenu de l\\'article...',\n      image_path: '../../../assets/resourceImage/image2.png'\n    }];\n  }\n  getCategories() {\n    return of(this.database);\n  }\n  getCategoryById(id) {\n    const categorie = this.database.find(r => r.id === id);\n    return of(categorie);\n  }\n  createCategory(categorie) {\n    categorie.id = (this.database.length + 1).toString(); // Génère un ID unique\n    this.database.push(categorie);\n    return of(categorie);\n  }\n  updateCategory(categorie) {\n    const index = this.database.findIndex(r => r.id === categorie.id);\n    if (index !== -1) {\n      this.database[index] = categorie;\n      return of(this.database[index]);\n    }\n    return of(undefined);\n  }\n  deleteCategory(id) {\n    const index = this.database.findIndex(r => r.id === id);\n    if (index !== -1) {\n      this.database.splice(index, 1);\n      return of(true);\n    }\n    return of(false);\n  }\n  shareCategory(id, email) {\n    // logique pour partager la ressource avec l'e-mail spécifié\n    // Inclure l'envoi d'un e-mail contenant un lien vers la ressource, par exemple\n    // retourner une valeur booléenne pour indiquer si le partage a réussi ou non\n    // Recherche de la ressource par ID\n    const categorie = this.database.find(r => r.id === id);\n    if (categorie) {\n      // Implémenter ici la logique pour partager la ressource\n      console.log(`La ressource avec l'ID ${id} a été partagée avec l'e-mail ${email}`);\n      return of(true); // Simulation de succès du partage\n    }\n\n    return of(false); // La ressource n'a pas été trouvée, le partage a échoué\n  }\n}\n\nCategoryService.ɵfac = function CategoryService_Factory(t) {\n  return new (t || CategoryService)();\n};\nCategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoryService,\n  factory: CategoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","CategoryService","constructor","id","title","description","content","image_path","getCategories","database","getCategoryById","categorie","find","r","createCategory","length","toString","push","updateCategory","index","findIndex","undefined","deleteCategory","splice","shareCategory","email","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\category\\category.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n// import { HttpClient } from '@angular/common/http';\r\n// import { Observable } from 'rxjs';\r\n// import { Resource } from '../../DTO/resource';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class ResourceService {\r\n//   private apiUrl = 'http://localhost:3000/api#/ressource';\r\n\r\n//   constructor(private http: HttpClient) { }\r\n\r\n//   getResources(): Observable<Resource[]> {\r\n//     return this.http.get<Resource[]>(this.apiUrl);\r\n//   }\r\n\r\n//   getResourceById(id: string): Observable<Resource> {\r\n//     return this.http.get<Resource>(`${this.apiUrl}/${id}`);\r\n//   }\r\n\r\n//   createResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.post<Resource>(this.apiUrl, resource);\r\n//   }\r\n\r\n//   updateResource(resource: Resource): Observable<Resource> {\r\n//     return this.http.put<Resource>(`${this.apiUrl}/${resource.id}`, resource);\r\n//   }\r\n\r\n//   deleteResource(id: string): Observable<void> {\r\n//     return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n//   }\r\n// }\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Category } from 'src/app/DTO/category';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoryService {\r\n\r\n  private database: Category[] = [\r\n    {\r\n      id: '1',\r\n      title: 'Les relations citoyennes',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n\r\n    },\r\n    {\r\n      id: '2',\r\n      title: 'Les relations citoyennes 2',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n\r\n    },\r\n    {\r\n      id: '3',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n    },\r\n    {\r\n      id: '4',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image1.jpg',\r\n    },\r\n    {\r\n      id: '5',\r\n      title: 'Les relations citoyennes 3',\r\n      description: 'Description de l\\'article sur les relations citoyennes',\r\n      content: 'Contenu de l\\'article...',\r\n      image_path: '../../../assets/resourceImage/image2.png',\r\n    },\r\n  ];\r\n\r\n  getCategories(): Observable<Category[]> {\r\n    return of(this.database);\r\n  }\r\n\r\n  getCategoryById(id: string): Observable<Category | undefined> {\r\n    const categorie = this.database.find(r => r.id === id);\r\n    return of(categorie);\r\n  }\r\n\r\n  createCategory(categorie: Category): Observable<Category> {\r\n    categorie.id = (this.database.length + 1).toString(); // Génère un ID unique\r\n    this.database.push(categorie);\r\n    return of(categorie);\r\n  }\r\n\r\n  updateCategory(categorie: Category): Observable<Category | undefined> {\r\n    const index = this.database.findIndex(r => r.id === categorie.id);\r\n    if (index !== -1) {\r\n      this.database[index] = categorie;\r\n      return of(this.database[index]);\r\n    }\r\n    return of(undefined);\r\n  }\r\n\r\n  deleteCategory(id: string): Observable<boolean> {\r\n    const index = this.database.findIndex(r => r.id === id);\r\n    if (index !== -1) {\r\n      this.database.splice(index, 1);\r\n      return of(true);\r\n    }\r\n    return of(false);\r\n  }\r\n\r\n  shareCategory(id: string, email: string): Observable<boolean> {\r\n    // logique pour partager la ressource avec l'e-mail spécifié\r\n    // Inclure l'envoi d'un e-mail contenant un lien vers la ressource, par exemple\r\n    // retourner une valeur booléenne pour indiquer si le partage a réussi ou non\r\n\r\n    // Recherche de la ressource par ID\r\n    const categorie = this.database.find(r => r.id === id);\r\n\r\n    if (categorie) {\r\n      // Implémenter ici la logique pour partager la ressource\r\n      console.log(`La ressource avec l'ID ${id} a été partagée avec l'e-mail ${email}`);\r\n      return of(true); // Simulation de succès du partage\r\n    }\r\n\r\n    return of(false); // La ressource n'a pas été trouvée, le partage a échoué\r\n  }\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}