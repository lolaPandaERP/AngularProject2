{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api/auth';\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  login(email, password) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }, {\n      headers\n    }).pipe(tap(response => {\n      this.token = response.token;\n    }));\n  }\n  getToken() {\n    return this.token;\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  logout() {\n    this.token = null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAgBA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,GAAG,QAAQ,gBAAgB;;;AAOpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,gCAAgC;EAGT;EAExCC,QAAQ,CAACC,IAAU;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAO,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC;EAC9D;EAEAG,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE,OAAO,IAAI,CAACI,IAAI,CACbG,IAAI,CAAM,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAE;MAAEE,KAAK;MAAEC;IAAQ,CAAE,EAAE;MAAEC;IAAO,CAAE,CAAC,CACnEC,IAAI,CACHZ,GAAG,CAAEa,QAAQ,IAAI;MACf,IAAI,CAACC,KAAK,GAAGD,QAAQ,CAACC,KAAK;IAC7B,CAAC,CAAC,CACH;EACL;EAEAC,QAAQ;IACN,OAAO,IAAI,CAACD,KAAK;EACnB;EAEAE,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACF,KAAK;EACrB;EAEAG,MAAM;IACJ,IAAI,CAACH,KAAK,GAAG,IAAI;EACnB;;AAhCWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiB,SAAXjB,WAAW;EAAAkB,YAFV;AAAM","names":["HttpHeaders","tap","AuthService","constructor","http","register","user","post","apiUrl","login","email","password","headers","pipe","response","token","getToken","isAuthenticated","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lola\\Documents\\GitHub\\AngularProject\\EntreCitoyens\\src\\app\\Services\\auth\\auth.service.ts"],"sourcesContent":["\r\n/**\r\n * importé les modules Injectable, HttpClient, HttpHeaders et Observable depuis les modules correspondants.\r\n*  importé l'interface User depuis le fichier user.ts.\r\n*  créé la classe AuthService annotée avec le décorateur @Injectable pour l'enregistrer en tant que service injectable dans l'application.\r\n*  initialisé la propriété apiUrl qui contient l'URL de l'API d'authentification.\r\n*  défini la méthode register qui s'occupe de l'enregistrement d'un nouvel utilisateur en appelant la méthode post du module HttpClient.\r\n*  défini la méthode login qui gère la connexion d'un utilisateur en appelant la méthode post du module HttpClient pour envoyer les informations d'identification à l'API.\r\n*  utilisé l'opérateur tap pour extraire et stocker le jeton d'authentification renvoyé par l'API dans la propriété token.\r\n*  défini la méthode getToken pour récupérer le jeton d'authentification.\r\n*  défini la méthode isAuthenticated qui renvoie true si un jeton d'authentification est présent, indiquant que l'utilisateur est authentifié.\r\n*  défini la méthode logout qui réinitialise la propriété token pour déconnecter l'utilisateur.\r\n */\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { User } from '../../DTO/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private apiUrl = 'http://localhost:3000/api/auth';\r\n  private token: string;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  register(user: User): Observable<User> {\r\n    return this.http.post<User>(`${this.apiUrl}/register`, user);\r\n  }\r\n\r\n  login(email: string, password: string): Observable<string> {\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\r\n\r\n    return this.http\r\n      .post<any>(`${this.apiUrl}/login`, { email, password }, { headers })\r\n      .pipe(\r\n        tap((response) => {\r\n          this.token = response.token;\r\n        })\r\n      );\r\n  }\r\n\r\n  getToken(): string {\r\n    return this.token;\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token;\r\n  }\r\n\r\n  logout(): void {\r\n    this.token = null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}